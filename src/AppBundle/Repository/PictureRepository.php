<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Category3;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;
use Doctrine\ORM\QueryBuilder;

/**
 * PictureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PictureRepository extends EntityRepository
{
    const SIMILAR_COUNT = 6;

    /**
     * * Get query builder for active pictures by category id
     *
     * @param Category3 $category
     * @return QueryBuilder
     */
    public function getActivePicturesFromCategory($category)
    {

        $categoryIds = $this->getCategoryChildren($category);
        $categoryIds[] = $category->getId();
        $qb = $this->createQueryBuilder('p');
        return $qb->innerJoin('p.categories', 'c')// Inner Join with categories
        ->innerJoin('p.form', 'f')// Inner Join with picture forms
        ->leftJoin('p.categoriesPictures', 'cp', Expr\Join::WITH, $qb->expr()->eq('cp.category', ':category_id'))
            ->where($qb->expr()->in('c.id', $categoryIds))
            ->setParameter('category_id', $category->getId())
            ->groupBy('p.id')
            ->andWhere('p.isActive = true');
    }

    /**
     * * Get query builder for active pictures by deferred
     *
     * @param array $ids
     * @return QueryBuilder
     */
    public function getActivePicturesForDeferred($ids)
    {
        return $this->createQueryBuilder('p')
            ->innerJoin('p.categories', 'c')// Inner Join with categories
            ->innerJoin('p.form', 'f')// Inner Join with picture forms
            ->andWhere('p.isActive = true')
            ->where('p.id IN (:ids)')
            ->setParameter('ids', $ids);
    }

    /**
     * Get query builder for active pictures by author slug
     *
     * @param string $slug
     * @return QueryBuilder
     */
    public function getActivePicturesByAuthor($slug)
    {
        $qb = $this->createQueryBuilder('p');
        return $qb->innerJoin('p.author', 'a')// Inner Join with author
            ->innerJoin('p.form', 'f')// Inner Join with picture form
            ->leftJoin('p.authorsPictures', 'ap', Expr\Join::WITH, $qb->expr()->eq('ap.author', 'a.id'))
            ->where('a.slug = :slug')
            ->andWhere('p.isActive = true')
            ->setParameter('slug', $slug);
    }

    /**
     * Get active last visited pictures
     *
     * @param array $ids
     * @return array
     */
    public function findLastVisited($ids)
    {

        return $this->createQueryBuilder('p')
            ->where('p.id IN (:ids)')
            ->setParameter('ids', $ids)
            ->getQuery()
            ->getResult();
    }

    /**
     * Get active deferred pictures
     *
     * @param array $ids
     * @return array
     */
    public function findDeferred($ids)
    {

        return $this->createQueryBuilder('p')
            ->where('p.id IN (:ids)')
            ->setParameter('ids', $ids)
            ->getQuery()
            ->getResult();
    }

    /**
     * Get query builder for active pictures by search string
     *
     * @param string $searchString
     * @return QueryBuilder
     */
    public function getActivePicturesForSearch($searchString)
    {
        return $this->createQueryBuilder('p')
            ->leftJoin('p.author', 'a')// Inner Join with author
            ->innerJoin('p.form', 'f')// Inner Join with picture form
            ->where('p.isActive = true')
            ->andWhere('(a.name LIKE :search_like OR p.title LIKE :search_like OR p.code = :search OR p.id = :search)')
            ->setParameter('search', $searchString)
            ->setParameter('search_like', '%' . $searchString . '%');
    }

    /**
     * Get active similar for picture
     *
     * @param integer $id
     * @return array
     */
    public function getActiveSimilar($id)
    {
        $entities = $this->createQueryBuilder('p')
            ->leftJoin('p.similar', 's')// Inner Join with similar
            ->where('p.id = :id')
            ->andWhere('p.isActive = true')
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult();

        if (count($entities) > 0) {
            $similar = $entities[0]->getSimilar();
        } else {
            $similar = [];
        }

        if (count($similar) < self::SIMILAR_COUNT && $entities[0]->getAuthor()) {
            if (count($similar) > 0) {
                foreach ($similar as $k => $v) {
                    $ids[] = $v->getId();
                }
            } else {
                $ids = [];
            }

            $limit = self::SIMILAR_COUNT - count($similar);
            $qb = $this->createQueryBuilder('p')
                ->leftJoin('p.author', 'a')// Inner Join with author
                ->where('a.id = :author_id')
                ->andWhere('p.isActive = true')
                ->andWhere('p.id != :id')
                ->setParameter('author_id', $entities[0]->getAuthor()->getId())
                ->setParameter('id', $id)
                ->setFirstResult(0)
                ->setMaxResults($limit);

            if (!empty($ids)) {
                $qb->andWhere('p.id NOT IN (:ids)')
                    ->setParameter('ids', $ids);
            }

            $entitiesAuthor = $qb->getQuery()
                ->getResult();

            foreach ($similar as $k => $v) {
                $entitiesAuthor[] = $v;
            }

            return $entitiesAuthor;
        } else {
            return $similar;
        }

        return [];
    }

    /**
     * Get children ids for category.
     *
     * @param Category3 $category
     *
     * @return array
     */
    protected function getCategoryChildren($category)
    {
        $categoryIds = [];
        if ($category instanceof Category3) {
            $children = $category->getChildren();
            if (count($children) > 0) {
                foreach ($children as $_category) {
                    /** @var Category3 $_category */
                    $categoryIds[] = $_category->getId();
                    if ($_category->getChildren()) {
                        $categoryIds = array_merge($categoryIds, $this->getCategoryChildren($_category));
                    }
                }
            }
        }
        return $categoryIds;
    }
}
