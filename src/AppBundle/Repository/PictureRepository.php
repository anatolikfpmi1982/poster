<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Category3;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * PictureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PictureRepository extends EntityRepository {
    /**
     * * Get query builder for active pictures by category id
     *
     * @param Category3 $category
     * @return QueryBuilder
     */
    public function getActivePicturesFromCategory( $category ) {

        $categoryIds = $this->getCategoryChildren($category);
        $categoryIds[] = $category->getId();
        $qb = $this->createQueryBuilder( 'p' );
        return $qb->innerJoin( 'p.categories', 'c' )// Inner Join with categories
                    ->innerJoin( 'p.form', 'f' )// Inner Join with picture forms
                    ->where( $qb->expr()->in('c.id', $categoryIds) )
                    ->andWhere( 'p.isActive = true' );
    }

    /**
     * * Get query builder for active pictures by category id
     *
     * @param array $ids
     * @return QueryBuilder
     */
    public function getActivePicturesForDeferred( $ids ) {
        return $this->createQueryBuilder( 'p' )
            ->innerJoin( 'p.categories', 'c' )// Inner Join with categories
            ->innerJoin( 'p.form', 'f' )// Inner Join with picture forms
            ->andWhere( 'p.isActive = true' )
            ->where( 'p.id IN (:ids)' )
            ->setParameter( 'ids', $ids );
    }

    /**
     * Get query builder for active pictures by author slug
     *
     * @param string $slug
     * @return QueryBuilder
     */
    public function getActivePicturesByAuthor( $slug ) {
        return $this->createQueryBuilder( 'p' )
            ->innerJoin( 'p.author', 'a' )// Inner Join with author
            ->innerJoin( 'p.form', 'f' )// Inner Join with picture form
            ->where( 'a.slug = :slug' )
            ->andWhere( 'p.isActive = true' )
            ->setParameter( 'slug', $slug );
    }

    /**
     * Get query builder for active pictures by author slug
     *
     * @param string $searchString
     * @return QueryBuilder
     */
    public function getActivePicturesForSearch( $searchString ) {
        return $this->createQueryBuilder( 'p' )
            ->innerJoin( 'p.author', 'a' )// Inner Join with author
            ->innerJoin( 'p.form', 'f' )// Inner Join with picture form
            ->where( 'p.isActive = true' )
            ->andWhere('(a.name LIKE :search_like OR p.title LIKE :search_like OR p.code = :search)')
            ->setParameter( 'search', $searchString)
            ->setParameter( 'search_like', '%' . $searchString . '%');
    }

    /**
     * Get active last visited pictures
     *
     * @param array $ids
     * @return array
     */
    public function findLastVisited( $ids ) {

        return $this->createQueryBuilder( 'p' )
                    ->where( 'p.id IN (:ids)' )
                    ->setParameter( 'ids', $ids )
                    ->getQuery()
                    ->getResult();
    }

    /**
     * Get active deferred pictures
     *
     * @param array $ids
     * @return array
     */
    public function findDeferred( $ids ) {

        return $this->createQueryBuilder( 'p' )
            ->where( 'p.id IN (:ids)' )
            ->setParameter( 'ids', $ids )
            ->getQuery()
            ->getResult();
    }

    /**
     * Get active similar for picture
     *
     * @param integer $id
     * @return array
     */
    public function getActiveSimilar( $id ) {
        $entities = $this->createQueryBuilder( 'p' )
                         ->innerJoin( 'p.similar', 's' )// Inner Join with similar
                         ->where( 'p.id = :id' )
                         ->andWhere( 'p.isActive = true' )
                         ->andWhere( 's.isActive = true' )
                         ->setParameter( 'id', $id )
                         ->getQuery()
                         ->getResult();

        if ( count( $entities ) > 0 ) {
            return $entities[0]->getSimilar();
        }

        return [ ];
    }

    /**
     * Get children ids for category.
     *
     * @param Category3 $category
     *
     * @return array
     */
    protected function getCategoryChildren($category) {
        $categoryIds = [];
        if($category instanceof Category3) {
            $children = $category->getChildren();
            if(count($children) > 0) {
                foreach($children as $_category) {
                    /** @var Category3 $_category */
                    $categoryIds[] = $_category->getId();
                    if($_category->getChildren()) {
                        $categoryIds = array_merge($categoryIds, $this->getCategoryChildren($_category));
                    }
                }
            }
        }
        return $categoryIds;
    }
}
