<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * PictureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PictureRepository extends EntityRepository {
    /**
     * * Get query builder for active pictures by category id
     *
     * @param integer $id
     * @return QueryBuilder
     */
    public function getActivePicturesFromCategory( $id ) {
        return $this->createQueryBuilder( 'p' )
                    ->innerJoin( 'p.categories', 'c' )// Inner Join with categories
                    ->innerJoin( 'p.form', 'f' )// Inner Join with picture forms
                    ->where( 'c.id = :category' )
                    ->andWhere( 'p.isActive = true' )
                    ->setParameter( 'category', $id );
    }

    /**
     * Get query builder for active pictures by author slug
     *
     * @param string $slug
     * @return QueryBuilder
     */
    public function getActivePicturesByAuthor( $slug ) {
        return $this->createQueryBuilder( 'p' )
            ->innerJoin( 'p.author', 'a' )// Inner Join with author
            ->innerJoin( 'p.form', 'f' )// Inner Join with picture form
            ->where( 'a.slug = :slug' )
            ->andWhere( 'p.isActive = true' )
            ->setParameter( 'slug', $slug );
    }

    /**
     * Get query builder for active pictures by author slug
     *
     * @param string $searchString
     * @return QueryBuilder
     */
    public function getActivePicturesForSearch( $searchString ) {
        return $this->createQueryBuilder( 'p' )
            ->innerJoin( 'p.author', 'a' )// Inner Join with author
            ->innerJoin( 'p.form', 'f' )// Inner Join with picture form
            ->where( 'p.isActive = true' )
            ->andWhere("(a.name = :search OR p.title = :search OR p.code = :search)")
            ->setParameter( 'search', $searchString);
    }

    /**
     * Get active last visited pictures
     *
     * @param array $ids
     * @return array
     */
    public function findLastVisited( $ids ) {

        return $this->createQueryBuilder( 'p' )
                    ->where( 'p.id IN (:ids)' )
                    ->setParameter( 'ids', $ids )
                    ->getQuery()
                    ->getResult();
    }

    /**
     * Get active deferred pictures
     *
     * @param array $ids
     * @return array
     */
    public function findDeferred( $ids ) {

        return $this->createQueryBuilder( 'p' )
            ->where( 'p.id IN (:ids)' )
            ->setParameter( 'ids', $ids )
            ->getQuery()
            ->getResult();
    }

    /**
     * Get active similar for picture
     *
     * @param integer $id
     * @return array
     */
    public function getActiveSimilar( $id ) {
        $entities = $this->createQueryBuilder( 'p' )
                         ->innerJoin( 'p.similar', 's' )// Inner Join with similar
                         ->where( 'p.id = :id' )
                         ->andWhere( 'p.isActive = true' )
                         ->andWhere( 's.isActive = true' )
                         ->setParameter( 'id', $id )
                         ->getQuery()
                         ->getResult();

        if ( count( $entities ) > 0 ) {
            return $entities[0]->getSimilar();
        }

        return [ ];
    }
}
